<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <name>Database Persistence Layer For Kotlin</name>
    <groupId>com.amcentral365</groupId>
    <artifactId>pl4kotlin</artifactId>
    <version>0.3.10</version>

    <properties>
        <kotlin.version>1.2.61</kotlin.version>
        <junit.version>5.1.0</junit.version>
        <dokka.version>0.9.16</dokka.version>
        <jdk.version>8</jdk.version>

        <kotlin.compiler.incremental>false</kotlin.compiler.incremental>
        <kotlin.compiler.jvmTarget>1.8</kotlin.compiler.jvmTarget>

        <skipTests>false</skipTests>
        <skip.surefire.tests>${skipTests}</skip.surefire.tests>  <!-- otherwise surefire ignores skipTests -->

        <!-- mvn site give: [ERROR] Unable to determine if resource X exists in http://download.java.net/maven/2/ -->
        <dependency.locations.enabled>false</dependency.locations.enabled>
    </properties>

    <dependencies>

      <!-- Kotlin features -->
      <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-stdlib-jdk8</artifactId>
        <version>${kotlin.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-reflect</artifactId>
        <version>${kotlin.version}</version>
      </dependency>

      <dependency>  <!-- Logging. https://github.com/MicroUtils/kotlin-logging -->
        <groupId>io.github.microutils</groupId>
        <artifactId>kotlin-logging</artifactId>
        <version>1.5.4</version>
      </dependency>

      <dependency>  <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14 -->
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.7.25</version>
      </dependency>

      <!-- ======================= Test dependencies ======================= -->

      <dependency>  <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>  <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>  <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>5.1.46</version>
        <scope>test</scope>
      </dependency>

      <dependency>  <!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
        <groupId>org.xerial</groupId>
        <artifactId>sqlite-jdbc</artifactId>
        <version>3.21.0.1</version>
        <scope>test</scope>
      </dependency>

      <dependency>  <!-- https://github.com/pgjdbc/pgjdbc -->
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>42.2.2</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <!-- Due to legal reasons, there is no publicly available Oracle JDBC drivers in legit Maven repos
             But it is easy to install one:
             1. Download it from Oracle site to your local box
                http://www.oracle.com/technetwork/database/features/jdbc/jdbc-ucp-122-3110062.html
             2. Install it into your local repo:
                mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 \
                  -Dversion=12.2.0.1 -Dpackaging=jar -Dfile=$HOME/Downloads/ojdbc8.jar -DgeneratePom=true

             Other options:
             a) package the ojdbc8.jar into the uber jar. There may be legal issues though,
             b) use Oracle Maven repo (you need to be registered on OTN)
                http://www.oracle.com/webfolder/application/maven/index.html
        -->
        <groupId>com.oracle</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>12.2.0.1</version>
        <scope>test</scope>
      </dependency>

    </dependencies>

    <build>

      <plugins>

        <plugin>
          <artifactId>kotlin-maven-plugin</artifactId>
          <groupId>org.jetbrains.kotlin</groupId>
          <version>${kotlin.version}</version>

          <executions>
            <execution>
              <id>compile</id>
              <goals> <goal>compile</goal> </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                  <sourceDir>${project.basedir}/src/main/java</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>

            <execution>
              <id>test-compile</id>
              <goals> <goal>test-compile</goal> </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                  <sourceDir>${project.basedir}/src/test/java</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>

          </executions>
        </plugin>

        <plugin>
          <groupId>org.jetbrains.dokka</groupId>
          <artifactId>dokka-maven-plugin</artifactId>
          <version>${dokka.version}</version>
          <executions>
            <execution>
              <phase>pre-site</phase>
              <goals>
                <goal>dokka</goal>
                <goal>javadoc</goal>
                <goal>javadocJar</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <outputFormat>markdown</outputFormat>  <!-- html, javadoc, html-as-java, markdown (gfm, jekyll) -->
            <cacheRoot>.dokka-cache</cacheRoot>
            <jdkVersion>${jdk.version}</jdkVersion>

            <sourceDirectories>
              <dir>${project.basedir}/src/main/kotlin</dir>
              <dir>${project.basedir}/src/main/java</dir>
            </sourceDirectories>

            <sourceLinks>
              <link>
                <dir>${project.basedir}</dir>
                <url>https://github.com/am-central-365/pl4kotlin/blob/master</url>
                <urlSuffix>#L</urlSuffix>
              </link>
            </sourceLinks>

            <noStdlibLink>true</noStdlibLink>

          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.0.0</version>
          <executions>
            <execution>
              <phase>compile</phase>
              <goals>
                <goal>javadoc</goal>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.5.1</version>
          <executions>
            <!-- Replacing default-compile as it is treated specially by maven -->
            <execution>
              <id>default-compile</id>
              <phase>none</phase>
            </execution>

            <!-- Replacing default-testCompile as it is treated specially by maven -->
            <execution>
              <id>default-testCompile</id>
              <phase>none</phase>
            </execution>

            <execution>
              <id>java-compile</id>
              <phase>compile</phase>
              <goals> <goal>compile</goal> </goals>
            </execution>

            <execution>
              <id>java-test-compile</id>
              <phase>test-compile</phase>
              <goals> <goal>testCompile</goal> </goals>
            </execution>

          </executions>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>

        <plugin>  <!-- Runs Unit tests -->
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.19.1</version>
          <configuration>
            <!-- skips surefire tests without skipping failsafe tests. Property value seems to magically default to false
                   mvn verify -Dskip.surefire.tests -->
            <skipTests>${skip.surefire.tests}</skipTests>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.junit.platform</groupId>
              <artifactId>junit-platform-surefire-provider</artifactId>
              <version>1.1.0</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>  <!-- Runs Integration tests, call with 'mvn verify', install, deploy, or integration-test -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>2.21.0</version>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <executions>
            <execution>
              <phase>verify</phase>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

      </plugins>

    </build>

  <pluginRepositories>
    <pluginRepository>
      <id>jcenter</id>
      <name>JCenter</name>
      <url>https://jcenter.bintray.com/</url>
    </pluginRepository>
  </pluginRepositories>

</project>
