//import org.junit.jupiter.api.Test

buildscript {
    ext.kotlin_version = '1.2.61'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

apply plugin: "kotlin"
apply plugin: 'java'
apply plugin: 'maven'   // enables gradle install
apply plugin: 'org.jetbrains.dokka'

group = 'com.amcentral365'
version = '0.3.12'

description = "Database Persistence Layer For Kotlin"

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility

def junit5Version = '5.2.0'

repositories {
     mavenLocal()
     maven { url "http://repo.maven.apache.org/maven2" }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

sourceSets {
    deploy
    integrationTest {
        kotlin.srcDir    'src/test/kotlin/com/amcentral365/pl4kotlin/integrationTests'
        resources.srcDir 'src/test/resources'
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "$targetCompatibility"
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    /*configure {
        // Assign all Java system properties from the command line to the JavaExec task:
        //    gradle -DdbConfig=sqlite.properties check
        systemProperties System.properties as Map<String, ?>
    }*/
}

check.dependsOn integrationTest   // "gradle check" runs integration test


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    // Assign all Java system properties from the command line to the JavaExec task:
    //    gradle -DdbConfig=sqlite.properties check
    systemProperties System.properties as Map<String, ?>
}


dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect'
    compile group: 'io.github.microutils', name: 'kotlin-logging',     version: '1.5.4'
    compile group: 'org.slf4j',            name: 'slf4j-log4j12',      version: '1.7.25'

    testCompile group: 'org.junit.jupiter',    name: 'junit-jupiter-engine', version: junit5Version
    testCompile group: 'org.junit.jupiter',    name: 'junit-jupiter-api',    version: junit5Version
    testCompile group: 'mysql',                name: 'mysql-connector-java', version: '5.1.46'
    testCompile group: 'org.xerial',           name: 'sqlite-jdbc',          version: '3.21.0.1'
    testCompile group: 'org.postgresql',       name: 'postgresql',           version: '42.2.2'
    testCompile group: 'com.oracle',           name: 'ojdbc8',               version: '12.2.0.1'

    //testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    //testRuntimeOnly    "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
}
